<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FATAL_ERROR_TITLE" xml:space="preserve">
    <value>Fatal error!</value>
  </data>
  <data name="FATAL_ERROR_TEXT" xml:space="preserve">
    <value>Fatal error. Any unsaved changes are lost.</value>
  </data>
  <data name="SAVE_CHANGES_QUESTION_TEXT" xml:space="preserve">
    <value>There are unsaved changes. Do you want to save your changes?</value>
  </data>
  <data name="SAVE_CHANGES_QUESTION_TITLE" xml:space="preserve">
    <value>Save changes?</value>
  </data>
  <data name="UNEXPECTED_ERROR_TITLE" xml:space="preserve">
    <value>Unexpected error</value>
  </data>
  <data name="UNEXPECTED_ERROR_TEXT" xml:space="preserve">
    <value>An unexpected error occurred.</value>
  </data>
  <data name="ABOUT_APP_DESCRIPTION" xml:space="preserve">
    <value>A simple manager for a physical shop/store. Handles product information and sales history.</value>
  </data>
  <data name="ABOUT_APP_TITLE" xml:space="preserve">
    <value>Shop manager</value>
  </data>
  <data name="DISCARD_CHANGES_TEXT" xml:space="preserve">
    <value>Disacrd all unsaved changes? Any unsaved changes will be lost if you discard the changes.</value>
  </data>
  <data name="DISCARD_CHANGES_TITLE" xml:space="preserve">
    <value>Discard all unsaved changes?</value>
  </data>
  <data name="UPDATE_STOCK_QUESTION_TEXT" xml:space="preserve">
    <value>Would you like to update the product stock (Quantity) as well to reflect the sales changes?</value>
  </data>
  <data name="UPDATE_STOCK_QUESTION_TITLE" xml:space="preserve">
    <value>Update stock as well?</value>
  </data>
  <data name="WARN_SALE_OUT_OF_STOCK_TEXT" xml:space="preserve">
    <value>The given quantity is larger than the selected product's stock (Quantity). This will result in a negative stock, which is nonsensical. Make sure this is the right quantity. Do you still want to update the stock?</value>
  </data>
  <data name="WARN_SALE_OUT_OF_STOCK_TITLE" xml:space="preserve">
    <value>Quantity larger than stock!</value>
  </data>
  <data name="DEPENDENT_PRODUCTS_ERROR_TEXT" xml:space="preserve">
    <value>There are products that belong in the category named "{0}". You can not delete the category until there are no more products using this category.</value>
  </data>
  <data name="DEPENDENT_PRODUCTS_ERROR_TITLE" xml:space="preserve">
    <value>Dependent products found!</value>
  </data>
  <data name="DEPENDENT_SALES_ERROR_TEXT" xml:space="preserve">
    <value>There are sales that are bound to the product named "{0}". You can not delete the product until there are no more sales bound to this product.</value>
  </data>
  <data name="DEPENDENT_SALES_ERROR_TITLE" xml:space="preserve">
    <value>Dependent sales found!</value>
  </data>
  <data name="CATEGORY_SAVE_NEEDED_TEXT" xml:space="preserve">
    <value>You need to save the changes before adding a category with the same name as one of the deleted categories.</value>
  </data>
  <data name="CATEGORY_SAVE_NEEDED_TITLE" xml:space="preserve">
    <value>Save needed</value>
  </data>
  <data name="VALIDATION_CATEGORY_NAME_EMPTY" xml:space="preserve">
    <value>The category name cannot be empty!</value>
  </data>
  <data name="VALIDATION_ERROR_TITLE" xml:space="preserve">
    <value>Input data error</value>
  </data>
  <data name="VALIDATION_MULTIPLE_CATEGORIES_SELECTED_TEXT" xml:space="preserve">
    <value>You can't update multiple categories at once. Select only one.</value>
  </data>
  <data name="VALIDATION_MULTIPLE_CATEGORIES_SELECTED_TITLE" xml:space="preserve">
    <value>Multiple categories selected</value>
  </data>
  <data name="VALIDATION_SALE_PRODUCT_NAME_EMPTY" xml:space="preserve">
    <value>The name of the product cannot be empty!</value>
  </data>
  <data name="VALIDATION_SALE_QUANTITY_EMPTY" xml:space="preserve">
    <value>The quantity can't be empty or negative!</value>
  </data>
  <data name="CANNOT_DELETE_ADMIN" xml:space="preserve">
    <value>You can't delete the initial admin account, "{0}".</value>
  </data>
  <data name="VALIDATION_PASSWORD_LONG" xml:space="preserve">
    <value>Password is too long.</value>
  </data>
  <data name="VALIDATION_PASSWORD_SHORT" xml:space="preserve">
    <value>Password is too short.</value>
  </data>
  <data name="VALIDATION_ROLE_INVALID" xml:space="preserve">
    <value>Invalid role. Select only one option, don't write anything else in the role field.</value>
  </data>
  <data name="VALIDATION_USERNAME_EXISTS" xml:space="preserve">
    <value>Username already exists.</value>
  </data>
  <data name="VALIDATION_USERNAME_LONG" xml:space="preserve">
    <value>Username is too long.</value>
  </data>
  <data name="VALIDATION_USERNAME_SHORT" xml:space="preserve">
    <value>Username is too short.</value>
  </data>
  <data name="LOGIN_ADMIN_INVALID_CREDENTIALS" xml:space="preserve">
    <value>Invalid admin username or password.</value>
  </data>
  <data name="LOGIN_INVALID_CREDENTIALS" xml:space="preserve">
    <value>Invalid username or password.</value>
  </data>
  <data name="LOGIN_INVALID_CREDENTIALS_TITLE" xml:space="preserve">
    <value>Invalid credentials</value>
  </data>
  <data name="LOGIN_INVALID_PASSWORD" xml:space="preserve">
    <value>Wrong password.</value>
  </data>
</root>